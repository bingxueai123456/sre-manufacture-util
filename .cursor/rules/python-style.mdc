---
globs: *.py
description: Python 代码风格和最佳实践
---

# Python 代码风格规范

## 代码格式
- 使用 4 个空格缩进（不使用 Tab）
- 行长度限制为 88 字符（Black 标准）
- 使用 UTF-8 编码，支持中文注释和字符串

## 导入规范
- 标准库导入在最前
- 第三方库导入在中间  
- 本地模块导入在最后
- 每组导入之间用空行分隔

## 命名约定
- 类名使用 PascalCase (如 MainWindow)
- 方法和变量使用 snake_case (如 generate_qr_code)
- 常量使用 UPPER_CASE (如 ERROR_CORRECT_L)
- 私有方法以下划线开头 (如 _private_method)

## 错误处理
- 使用具体的异常类型而不是通用的 Exception
- 在文件操作、网络操作等地方添加适当的异常处理
- 使用 try-except-finally 结构

## 文档和注释
- 使用中文注释解释复杂逻辑
- 为类和重要方法添加 docstring
- 行内注释使用 # 符号，与代码保持一个空格距离

## 类型提示
- 对函数参数和返回值添加类型提示
- 使用 typing 模块的类型（如 Optional, Dict, List）
- 复杂数据结构考虑使用 TypedDict 或 dataclass

## 示例代码模式
```python
from typing import Optional, Dict, Any

class ExampleClass:
    """示例类，展示代码风格规范"""
    
    def __init__(self, name: str) -> None:
        self.name = name
        self._private_data: Dict[str, Any] = {}
    
    def process_data(self, data: Optional[str] = None) -> bool:
        """处理数据的示例方法
        
        Args:
            data: 可选的输入数据
            
        Returns:
            处理是否成功
        """
        try:
            # 处理逻辑
            if data:
                self._private_data["processed"] = data.strip()
                return True
            return False
        except Exception as e:
            print(f"处理数据时出错: {e}")
            return False
```